// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RedWolf.API
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RedWolfAPI.
    /// </summary>
    public static partial class RedWolfAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CommandOutput> GetCommandOutputs(this IRedWolfAPI operations)
            {
                return operations.GetCommandOutputsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CommandOutput>> GetCommandOutputsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandOutputsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommandOutput CreateCommandOutput(this IRedWolfAPI operations, CommandOutput body = default(CommandOutput))
            {
                return operations.CreateCommandOutputAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> CreateCommandOutputAsync(this IRedWolfAPI operations, CommandOutput body = default(CommandOutput), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCommandOutputWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommandOutput EditCommandOutput(this IRedWolfAPI operations, CommandOutput body = default(CommandOutput))
            {
                return operations.EditCommandOutputAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> EditCommandOutputAsync(this IRedWolfAPI operations, CommandOutput body = default(CommandOutput), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCommandOutputWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CommandOutput GetCommandOutput(this IRedWolfAPI operations, int id)
            {
                return operations.GetCommandOutputAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> GetCommandOutputAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandOutputWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteCommandOutput(this IRedWolfAPI operations, int id)
            {
                operations.DeleteCommandOutputAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCommandOutputAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCommandOutputWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AppendCommandOutput(this IRedWolfAPI operations, int id, string body = default(string))
            {
                operations.AppendCommandOutputAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendCommandOutputAsync(this IRedWolfAPI operations, int id, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AppendCommandOutputWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<RedWolfUser> GetUsers(this IRedWolfAPI operations)
            {
                return operations.GetUsersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RedWolfUser>> GetUsersAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RedWolfUser CreateUser(this IRedWolfAPI operations, RedWolfUserRegister body = default(RedWolfUserRegister))
            {
                return operations.CreateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUser> CreateUserAsync(this IRedWolfAPI operations, RedWolfUserRegister body = default(RedWolfUserRegister), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RedWolfUser EditUser(this IRedWolfAPI operations, RedWolfUser body = default(RedWolfUser))
            {
                return operations.EditUserAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUser> EditUserAsync(this IRedWolfAPI operations, RedWolfUser body = default(RedWolfUser), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static RedWolfUser GetUser(this IRedWolfAPI operations, string id)
            {
                return operations.GetUserAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUser> GetUserAsync(this IRedWolfAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteUser(this IRedWolfAPI operations, string id)
            {
                operations.DeleteUserAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsync(this IRedWolfAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static RedWolfUser GetCurrentUser(this IRedWolfAPI operations)
            {
                return operations.GetCurrentUserAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUser> GetCurrentUserAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RedWolfUserLoginResult Login(this IRedWolfAPI operations, RedWolfUserLogin body = default(RedWolfUserLogin))
            {
                return operations.LoginAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUserLoginResult> LoginAsync(this IRedWolfAPI operations, RedWolfUserLogin body = default(RedWolfUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RedWolfUser EditUserPassword(this IRedWolfAPI operations, RedWolfUserLogin body = default(RedWolfUserLogin))
            {
                return operations.EditUserPasswordAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RedWolfUser> EditUserPasswordAsync(this IRedWolfAPI operations, RedWolfUserLogin body = default(RedWolfUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserPasswordWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<StringIdentityUserRole> GetUsersRoles(this IRedWolfAPI operations)
            {
                return operations.GetUsersRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StringIdentityUserRole>> GetUsersRolesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<StringIdentityUserRole> GetUserRoles(this IRedWolfAPI operations, string id)
            {
                return operations.GetUserRolesAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StringIdentityUserRole>> GetUserRolesAsync(this IRedWolfAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRolesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static StringIdentityUserRole GetUserRole(this IRedWolfAPI operations, string id, string rid)
            {
                return operations.GetUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringIdentityUserRole> GetUserRoleAsync(this IRedWolfAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static StringIdentityUserRole CreateUserRole(this IRedWolfAPI operations, string id, string rid)
            {
                return operations.CreateUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringIdentityUserRole> CreateUserRoleAsync(this IRedWolfAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static void DeleteUserRole(this IRedWolfAPI operations, string id, string rid)
            {
                operations.DeleteUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserRoleAsync(this IRedWolfAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IdentityRole> GetRoles(this IRedWolfAPI operations)
            {
                return operations.GetRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentityRole>> GetRolesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static IdentityRole GetRole(this IRedWolfAPI operations, string rid)
            {
                return operations.GetRoleAsync(rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityRole> GetRoleAsync(this IRedWolfAPI operations, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleWithHttpMessagesAsync(rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedCredential> GetCredentials(this IRedWolfAPI operations)
            {
                return operations.GetCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedCredential>> GetCredentialsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedPasswordCredential> GetPasswordCredentials(this IRedWolfAPI operations)
            {
                return operations.GetPasswordCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedPasswordCredential>> GetPasswordCredentialsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPasswordCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedPasswordCredential CreatePasswordCredential(this IRedWolfAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential))
            {
                return operations.CreatePasswordCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> CreatePasswordCredentialAsync(this IRedWolfAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePasswordCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedPasswordCredential EditPasswordCredential(this IRedWolfAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential))
            {
                return operations.EditPasswordCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> EditPasswordCredentialAsync(this IRedWolfAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditPasswordCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedHashCredential> GetHashCredentials(this IRedWolfAPI operations)
            {
                return operations.GetHashCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedHashCredential>> GetHashCredentialsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHashCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedHashCredential CreateHashCredential(this IRedWolfAPI operations, CapturedHashCredential body = default(CapturedHashCredential))
            {
                return operations.CreateHashCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> CreateHashCredentialAsync(this IRedWolfAPI operations, CapturedHashCredential body = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHashCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedHashCredential EditHashCredential(this IRedWolfAPI operations, CapturedHashCredential body = default(CapturedHashCredential))
            {
                return operations.EditHashCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> EditHashCredentialAsync(this IRedWolfAPI operations, CapturedHashCredential body = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHashCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedTicketCredential> GetTicketCredentials(this IRedWolfAPI operations)
            {
                return operations.GetTicketCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedTicketCredential>> GetTicketCredentialsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTicketCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedTicketCredential CreateTicketCredential(this IRedWolfAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential))
            {
                return operations.CreateTicketCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> CreateTicketCredentialAsync(this IRedWolfAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTicketCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedTicketCredential EditTicketCredential(this IRedWolfAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential))
            {
                return operations.EditTicketCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> EditTicketCredentialAsync(this IRedWolfAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditTicketCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedCredential GetCredential(this IRedWolfAPI operations, int id)
            {
                return operations.GetCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedCredential> GetCredentialAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteCredential(this IRedWolfAPI operations, int id)
            {
                operations.DeleteCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCredentialAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedPasswordCredential GetPasswordCredential(this IRedWolfAPI operations, int id)
            {
                return operations.GetPasswordCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> GetPasswordCredentialAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPasswordCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedHashCredential GetHashCredential(this IRedWolfAPI operations, int id)
            {
                return operations.GetHashCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> GetHashCredentialAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHashCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedTicketCredential GetTicketCredential(this IRedWolfAPI operations, int id)
            {
                return operations.GetTicketCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> GetTicketCredentialAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTicketCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbeddedResource> GetEmbeddedResources(this IRedWolfAPI operations)
            {
                return operations.GetEmbeddedResourcesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbeddedResource>> GetEmbeddedResourcesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmbeddedResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EmbeddedResource CreateEmbeddedResource(this IRedWolfAPI operations, EmbeddedResource body = default(EmbeddedResource))
            {
                return operations.CreateEmbeddedResourceAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> CreateEmbeddedResourceAsync(this IRedWolfAPI operations, EmbeddedResource body = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEmbeddedResourceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EmbeddedResource EditEmbeddedResource(this IRedWolfAPI operations, EmbeddedResource body = default(EmbeddedResource))
            {
                return operations.EditEmbeddedResourceAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> EditEmbeddedResourceAsync(this IRedWolfAPI operations, EmbeddedResource body = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditEmbeddedResourceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EmbeddedResource GetEmbeddedResource(this IRedWolfAPI operations, int id)
            {
                return operations.GetEmbeddedResourceAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> GetEmbeddedResourceAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmbeddedResourceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteEmbeddedResource(this IRedWolfAPI operations, int id)
            {
                operations.DeleteEmbeddedResourceAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEmbeddedResourceAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEmbeddedResourceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EventModel> GetEvents(this IRedWolfAPI operations)
            {
                return operations.GetEventsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EventModel CreateEvent(this IRedWolfAPI operations, EventModel body = default(EventModel))
            {
                return operations.CreateEventAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> CreateEventAsync(this IRedWolfAPI operations, EventModel body = default(EventModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EventModel GetEvent(this IRedWolfAPI operations, int id)
            {
                return operations.GetEventAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> GetEventAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static long? GetEventTime(this IRedWolfAPI operations)
            {
                return operations.GetEventTimeAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> GetEventTimeAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            public static IList<EventModel> GetEventsAfter(this IRedWolfAPI operations, long fromdate)
            {
                return operations.GetEventsAfterAsync(fromdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsAfterAsync(this IRedWolfAPI operations, long fromdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsAfterWithHttpMessagesAsync(fromdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            public static IList<EventModel> GetEventsRange(this IRedWolfAPI operations, long fromdate, long todate)
            {
                return operations.GetEventsRangeAsync(fromdate, todate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsRangeAsync(this IRedWolfAPI operations, long fromdate, long todate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsRangeWithHttpMessagesAsync(fromdate, todate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static DownloadEvent GetDownloadEvent(this IRedWolfAPI operations, int id)
            {
                return operations.GetDownloadEventAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadEvent> GetDownloadEventAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadEventWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string GetDownloadContent(this IRedWolfAPI operations, int id)
            {
                return operations.GetDownloadContentAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDownloadContentAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadContentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EventModel CreateDownloadEvent(this IRedWolfAPI operations, DownloadEvent body = default(DownloadEvent))
            {
                return operations.CreateDownloadEventAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> CreateDownloadEventAsync(this IRedWolfAPI operations, DownloadEvent body = default(DownloadEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDownloadEventWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Grawl> GetGrawls(this IRedWolfAPI operations)
            {
                return operations.GetGrawlsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Grawl>> GetGrawlsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Grawl CreateGrawl(this IRedWolfAPI operations, Grawl body = default(Grawl))
            {
                return operations.CreateGrawlAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> CreateGrawlAsync(this IRedWolfAPI operations, Grawl body = default(Grawl), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGrawlWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Grawl EditGrawl(this IRedWolfAPI operations, Grawl body = default(Grawl))
            {
                return operations.EditGrawlAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> EditGrawlAsync(this IRedWolfAPI operations, Grawl body = default(Grawl), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditGrawlWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Grawl GetGrawl(this IRedWolfAPI operations, int id)
            {
                return operations.GetGrawlAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> GetGrawlAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteGrawl(this IRedWolfAPI operations, int id)
            {
                operations.DeleteGrawlAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGrawlAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGrawlWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static Grawl GetGrawlByName(this IRedWolfAPI operations, string name)
            {
                return operations.GetGrawlByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> GetGrawlByNameAsync(this IRedWolfAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anotherid'>
            /// </param>
            public static Grawl GetGrawlByANOTHERID(this IRedWolfAPI operations, string anotherid)
            {
                return operations.GetGrawlByANOTHERIDAsync(anotherid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anotherid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> GetGrawlByANOTHERIDAsync(this IRedWolfAPI operations, string anotherid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlByANOTHERIDWithHttpMessagesAsync(anotherid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serveranotherid'>
            /// </param>
            public static Grawl GetGrawlByOriginalServerANOTHERID(this IRedWolfAPI operations, string serveranotherid)
            {
                return operations.GetGrawlByOriginalServerANOTHERIDAsync(serveranotherid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serveranotherid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> GetGrawlByOriginalServerANOTHERIDAsync(this IRedWolfAPI operations, string serveranotherid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlByOriginalServerANOTHERIDWithHttpMessagesAsync(serveranotherid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            public static IList<string> GetPathToChildGrawl(this IRedWolfAPI operations, int id, int cid)
            {
                return operations.GetPathToChildGrawlAsync(id, cid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetPathToChildGrawlAsync(this IRedWolfAPI operations, int id, int cid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPathToChildGrawlWithHttpMessagesAsync(id, cid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Grawl GetOutboundGrawl(this IRedWolfAPI operations, int id)
            {
                return operations.GetOutboundGrawlAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grawl> GetOutboundGrawlAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOutboundGrawlWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlCommand InteractGrawl(this IRedWolfAPI operations, int id, string body = default(string))
            {
                return operations.InteractGrawlAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlCommand> InteractGrawlAsync(this IRedWolfAPI operations, int id, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InteractGrawlWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static byte[] CompileGrawlExecutor(this IRedWolfAPI operations, int id)
            {
                return operations.CompileGrawlExecutorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<byte[]> CompileGrawlExecutorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompileGrawlExecutorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GrawlCommand> GetGrawlCommands(this IRedWolfAPI operations)
            {
                return operations.GetGrawlCommandsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlCommand>> GetGrawlCommandsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlCommandsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlCommand CreateGrawlCommand(this IRedWolfAPI operations, GrawlCommand body = default(GrawlCommand))
            {
                return operations.CreateGrawlCommandAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlCommand> CreateGrawlCommandAsync(this IRedWolfAPI operations, GrawlCommand body = default(GrawlCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGrawlCommandWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlCommand EditGrawlCommand(this IRedWolfAPI operations, GrawlCommand body = default(GrawlCommand))
            {
                return operations.EditGrawlCommandAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlCommand> EditGrawlCommandAsync(this IRedWolfAPI operations, GrawlCommand body = default(GrawlCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditGrawlCommandWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static GrawlCommand GetGrawlCommand(this IRedWolfAPI operations, int id)
            {
                return operations.GetGrawlCommandAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlCommand> GetGrawlCommandAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlCommandWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteGrawlCommand(this IRedWolfAPI operations, int id)
            {
                operations.DeleteGrawlCommandAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGrawlCommandAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGrawlCommandWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GrawlTask> GetGrawlTasks(this IRedWolfAPI operations)
            {
                return operations.GetGrawlTasksAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTask>> GetGrawlTasksAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlTasksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlTask CreateGrawlTask(this IRedWolfAPI operations, GrawlTask body = default(GrawlTask))
            {
                return operations.CreateGrawlTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTask> CreateGrawlTaskAsync(this IRedWolfAPI operations, GrawlTask body = default(GrawlTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGrawlTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlTask EditGrawlTask(this IRedWolfAPI operations, GrawlTask body = default(GrawlTask))
            {
                return operations.EditGrawlTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTask> EditGrawlTaskAsync(this IRedWolfAPI operations, GrawlTask body = default(GrawlTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditGrawlTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static GrawlTask GetGrawlTask(this IRedWolfAPI operations, int id)
            {
                return operations.GetGrawlTaskAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTask> GetGrawlTaskAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteGrawlTask(this IRedWolfAPI operations, int id)
            {
                operations.DeleteGrawlTaskAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGrawlTaskAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGrawlTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GrawlTasking> GetAllGrawlTaskings(this IRedWolfAPI operations)
            {
                return operations.GetAllGrawlTaskingsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTasking>> GetAllGrawlTaskingsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGrawlTaskingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlTasking CreateGrawlTasking(this IRedWolfAPI operations, GrawlTasking body = default(GrawlTasking))
            {
                return operations.CreateGrawlTaskingAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTasking> CreateGrawlTaskingAsync(this IRedWolfAPI operations, GrawlTasking body = default(GrawlTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGrawlTaskingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GrawlTasking EditGrawlTasking(this IRedWolfAPI operations, GrawlTasking body = default(GrawlTasking))
            {
                return operations.EditGrawlTaskingAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTasking> EditGrawlTaskingAsync(this IRedWolfAPI operations, GrawlTasking body = default(GrawlTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditGrawlTaskingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GrawlTasking> GetGrawlTaskings(this IRedWolfAPI operations, int id)
            {
                return operations.GetGrawlTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTasking>> GetGrawlTaskingsAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GrawlTasking> GetSearchGrawlTaskings(this IRedWolfAPI operations, int id)
            {
                return operations.GetSearchGrawlTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTasking>> GetSearchGrawlTaskingsAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchGrawlTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GrawlTasking> GetUninitializedGrawlTaskings(this IRedWolfAPI operations, int id)
            {
                return operations.GetUninitializedGrawlTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTasking>> GetUninitializedGrawlTaskingsAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUninitializedGrawlTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GrawlTasking> GetSearchUninitializedGrawlTaskings(this IRedWolfAPI operations, int id)
            {
                return operations.GetSearchUninitializedGrawlTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GrawlTasking>> GetSearchUninitializedGrawlTaskingsAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchUninitializedGrawlTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static GrawlTasking GetGrawlTasking(this IRedWolfAPI operations, int tid)
            {
                return operations.GetGrawlTaskingAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTasking> GetGrawlTaskingAsync(this IRedWolfAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlTaskingWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static void DeleteGrawlTasking(this IRedWolfAPI operations, int tid)
            {
                operations.DeleteGrawlTaskingAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGrawlTaskingAsync(this IRedWolfAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGrawlTaskingWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            public static GrawlTasking GetGrawlTaskingByName(this IRedWolfAPI operations, string taskingname)
            {
                return operations.GetGrawlTaskingByNameAsync(taskingname).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GrawlTasking> GetGrawlTaskingByNameAsync(this IRedWolfAPI operations, string taskingname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGrawlTaskingByNameWithHttpMessagesAsync(taskingname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ImplantTemplate> GetImplantTemplates(this IRedWolfAPI operations)
            {
                return operations.GetImplantTemplatesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImplantTemplate>> GetImplantTemplatesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ImplantTemplate CreateImplantTemplate(this IRedWolfAPI operations, ImplantTemplate body = default(ImplantTemplate))
            {
                return operations.CreateImplantTemplateAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> CreateImplantTemplateAsync(this IRedWolfAPI operations, ImplantTemplate body = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImplantTemplateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ImplantTemplate EditImplantTemplate(this IRedWolfAPI operations, ImplantTemplate body = default(ImplantTemplate))
            {
                return operations.EditImplantTemplateAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> EditImplantTemplateAsync(this IRedWolfAPI operations, ImplantTemplate body = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditImplantTemplateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ImplantTemplate GetImplantTemplate(this IRedWolfAPI operations, int id)
            {
                return operations.GetImplantTemplateAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> GetImplantTemplateAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteImplantTemplate(this IRedWolfAPI operations, int id)
            {
                operations.DeleteImplantTemplateAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteImplantTemplateAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteImplantTemplateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static ImplantTemplate GetImplantTemplateByName(this IRedWolfAPI operations, string name)
            {
                return operations.GetImplantTemplateByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> GetImplantTemplateByNameAsync(this IRedWolfAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplateByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetReport(this IRedWolfAPI operations)
            {
                return operations.GetReportAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetReportAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Indicator> GetIndicators(this IRedWolfAPI operations)
            {
                return operations.GetIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Indicator>> GetIndicatorsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Indicator CreateIndicator(this IRedWolfAPI operations, Indicator body = default(Indicator))
            {
                return operations.CreateIndicatorAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> CreateIndicatorAsync(this IRedWolfAPI operations, Indicator body = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIndicatorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Indicator EditIndicator(this IRedWolfAPI operations, Indicator body = default(Indicator))
            {
                return operations.EditIndicatorAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> EditIndicatorAsync(this IRedWolfAPI operations, Indicator body = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditIndicatorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FileIndicator> GetFileIndicators(this IRedWolfAPI operations)
            {
                return operations.GetFileIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FileIndicator>> GetFileIndicatorsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NetworkIndicator> GetNetworkIndicators(this IRedWolfAPI operations)
            {
                return operations.GetNetworkIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkIndicator>> GetNetworkIndicatorsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TargetIndicator> GetTargetIndicators(this IRedWolfAPI operations)
            {
                return operations.GetTargetIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TargetIndicator>> GetTargetIndicatorsAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTargetIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Indicator GetIndicator(this IRedWolfAPI operations, int id)
            {
                return operations.GetIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> GetIndicatorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteIndicator(this IRedWolfAPI operations, int id)
            {
                operations.DeleteIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIndicatorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static FileIndicator GetFileIndicator(this IRedWolfAPI operations, int id)
            {
                return operations.GetFileIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileIndicator> GetFileIndicatorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static NetworkIndicator GetNetworkIndicator(this IRedWolfAPI operations, int id)
            {
                return operations.GetNetworkIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkIndicator> GetNetworkIndicatorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TargetIndicator GetTargetIndicator(this IRedWolfAPI operations, int id)
            {
                return operations.GetTargetIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TargetIndicator> GetTargetIndicatorAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTargetIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Launcher> GetLaunchers(this IRedWolfAPI operations)
            {
                return operations.GetLaunchersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Launcher>> GetLaunchersAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLaunchersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher GetBinaryLauncher(this IRedWolfAPI operations)
            {
                return operations.GetBinaryLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GetBinaryLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBinaryLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher GenerateBinaryLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateBinaryLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GenerateBinaryLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateBinaryLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BinaryLauncher EditBinaryLauncher(this IRedWolfAPI operations, BinaryLauncher body = default(BinaryLauncher))
            {
                return operations.EditBinaryLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> EditBinaryLauncherAsync(this IRedWolfAPI operations, BinaryLauncher body = default(BinaryLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditBinaryLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BinaryLauncher GenerateBinaryHostedLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateBinaryHostedLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GenerateBinaryHostedLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateBinaryHostedLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ShellCodeLauncher GetShellCodeLauncher(this IRedWolfAPI operations)
            {
                return operations.GetShellCodeLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GetShellCodeLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShellCodeLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ShellCodeLauncher GenerateShellCodeLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateShellCodeLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GenerateShellCodeLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateShellCodeLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ShellCodeLauncher EditShellCodeLauncher(this IRedWolfAPI operations, ShellCodeLauncher body = default(ShellCodeLauncher))
            {
                return operations.EditShellCodeLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> EditShellCodeLauncherAsync(this IRedWolfAPI operations, ShellCodeLauncher body = default(ShellCodeLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditShellCodeLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ShellCodeLauncher GenerateShellCodeHostedLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateShellCodeHostedLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GenerateShellCodeHostedLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateShellCodeHostedLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher GetPowerShellLauncher(this IRedWolfAPI operations)
            {
                return operations.GetPowerShellLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GetPowerShellLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPowerShellLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher GeneratePowerShellLauncher(this IRedWolfAPI operations)
            {
                return operations.GeneratePowerShellLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GeneratePowerShellLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeneratePowerShellLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PowerShellLauncher EditPowerShellLauncher(this IRedWolfAPI operations, PowerShellLauncher body = default(PowerShellLauncher))
            {
                return operations.EditPowerShellLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> EditPowerShellLauncherAsync(this IRedWolfAPI operations, PowerShellLauncher body = default(PowerShellLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditPowerShellLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PowerShellLauncher GeneratePowerShellHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GeneratePowerShellHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GeneratePowerShellHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeneratePowerShellHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher GetMSBuildLauncher(this IRedWolfAPI operations)
            {
                return operations.GetMSBuildLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GetMSBuildLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSBuildLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher GenerateMSBuildLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateMSBuildLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GenerateMSBuildLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMSBuildLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MSBuildLauncher EditMSBuildLauncher(this IRedWolfAPI operations, MSBuildLauncher body = default(MSBuildLauncher))
            {
                return operations.EditMSBuildLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> EditMSBuildLauncherAsync(this IRedWolfAPI operations, MSBuildLauncher body = default(MSBuildLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMSBuildLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MSBuildLauncher GenerateMSBuildHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateMSBuildHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GenerateMSBuildHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMSBuildHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher GetInstallUtilLauncher(this IRedWolfAPI operations)
            {
                return operations.GetInstallUtilLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GetInstallUtilLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstallUtilLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher GenerateInstallUtilLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateInstallUtilLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GenerateInstallUtilLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateInstallUtilLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static InstallUtilLauncher EditInstallUtilLauncher(this IRedWolfAPI operations, InstallUtilLauncher body = default(InstallUtilLauncher))
            {
                return operations.EditInstallUtilLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> EditInstallUtilLauncherAsync(this IRedWolfAPI operations, InstallUtilLauncher body = default(InstallUtilLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditInstallUtilLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static InstallUtilLauncher GenerateInstallUtilHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateInstallUtilHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GenerateInstallUtilHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateInstallUtilHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher GetWmicLauncher(this IRedWolfAPI operations)
            {
                return operations.GetWmicLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GetWmicLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWmicLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher GenerateWmicLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateWmicLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GenerateWmicLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWmicLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WmicLauncher EditWmicLauncher(this IRedWolfAPI operations, WmicLauncher body = default(WmicLauncher))
            {
                return operations.EditWmicLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> EditWmicLauncherAsync(this IRedWolfAPI operations, WmicLauncher body = default(WmicLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWmicLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WmicLauncher GenerateWmicHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateWmicHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GenerateWmicHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWmicHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher GetRegsvr32Launcher(this IRedWolfAPI operations)
            {
                return operations.GetRegsvr32LauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GetRegsvr32LauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRegsvr32LauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher GenerateRegsvr32Launcher(this IRedWolfAPI operations)
            {
                return operations.GenerateRegsvr32LauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GenerateRegsvr32LauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateRegsvr32LauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Regsvr32Launcher EditRegsvr32Launcher(this IRedWolfAPI operations, Regsvr32Launcher body = default(Regsvr32Launcher))
            {
                return operations.EditRegsvr32LauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> EditRegsvr32LauncherAsync(this IRedWolfAPI operations, Regsvr32Launcher body = default(Regsvr32Launcher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditRegsvr32LauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Regsvr32Launcher GenerateRegsvr32HostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateRegsvr32HostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GenerateRegsvr32HostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateRegsvr32HostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher GetMshtaLauncher(this IRedWolfAPI operations)
            {
                return operations.GetMshtaLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GetMshtaLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMshtaLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher GenerateMshtaLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateMshtaLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GenerateMshtaLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMshtaLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MshtaLauncher EditMshtaLauncher(this IRedWolfAPI operations, MshtaLauncher body = default(MshtaLauncher))
            {
                return operations.EditMshtaLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> EditMshtaLauncherAsync(this IRedWolfAPI operations, MshtaLauncher body = default(MshtaLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMshtaLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MshtaLauncher GenerateMshtaHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateMshtaHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GenerateMshtaHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMshtaHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher GetCscriptLauncher(this IRedWolfAPI operations)
            {
                return operations.GetCscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GetCscriptLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher GenerateCscriptLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateCscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GenerateCscriptLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateCscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CscriptLauncher EditCscriptLauncher(this IRedWolfAPI operations, CscriptLauncher body = default(CscriptLauncher))
            {
                return operations.EditCscriptLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> EditCscriptLauncherAsync(this IRedWolfAPI operations, CscriptLauncher body = default(CscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCscriptLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CscriptLauncher GenerateCscriptHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateCscriptHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GenerateCscriptHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateCscriptHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher GetWscriptLauncher(this IRedWolfAPI operations)
            {
                return operations.GetWscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GetWscriptLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher GenerateWscriptLauncher(this IRedWolfAPI operations)
            {
                return operations.GenerateWscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GenerateWscriptLauncherAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WscriptLauncher EditWscriptLauncher(this IRedWolfAPI operations, WscriptLauncher body = default(WscriptLauncher))
            {
                return operations.EditWscriptLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> EditWscriptLauncherAsync(this IRedWolfAPI operations, WscriptLauncher body = default(WscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWscriptLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WscriptLauncher GenerateWscriptHostedFileLauncher(this IRedWolfAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateWscriptHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GenerateWscriptHostedFileLauncherAsync(this IRedWolfAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWscriptHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ListenerType> GetListenerTypes(this IRedWolfAPI operations)
            {
                return operations.GetListenerTypesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListenerType>> GetListenerTypesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ListenerType GetListenerType(this IRedWolfAPI operations, int id)
            {
                return operations.GetListenerTypeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListenerType> GetListenerTypeAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerTypeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Listener> GetListeners(this IRedWolfAPI operations)
            {
                return operations.GetListenersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Listener>> GetListenersAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Listener EditListener(this IRedWolfAPI operations, Listener body = default(Listener))
            {
                return operations.EditListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> EditListenerAsync(this IRedWolfAPI operations, Listener body = default(Listener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Listener GetListener(this IRedWolfAPI operations, int id)
            {
                return operations.GetListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> GetListenerAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteListener(this IRedWolfAPI operations, int id)
            {
                operations.DeleteListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteListenerAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpListener GetHttpListener(this IRedWolfAPI operations, int id)
            {
                return operations.GetHttpListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> GetHttpListenerAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpListener CreateHttpListener(this IRedWolfAPI operations, HttpListener body = default(HttpListener))
            {
                return operations.CreateHttpListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> CreateHttpListenerAsync(this IRedWolfAPI operations, HttpListener body = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHttpListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpListener EditHttpListener(this IRedWolfAPI operations, HttpListener body = default(HttpListener))
            {
                return operations.EditHttpListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> EditHttpListenerAsync(this IRedWolfAPI operations, HttpListener body = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHttpListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static BridgeListener GetBridgeListener(this IRedWolfAPI operations, int id)
            {
                return operations.GetBridgeListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> GetBridgeListenerAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBridgeListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BridgeListener CreateBridgeListener(this IRedWolfAPI operations, BridgeListener body = default(BridgeListener))
            {
                return operations.CreateBridgeListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> CreateBridgeListenerAsync(this IRedWolfAPI operations, BridgeListener body = default(BridgeListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBridgeListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BridgeListener EditBridgeListener(this IRedWolfAPI operations, BridgeListener body = default(BridgeListener))
            {
                return operations.EditBridgeListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> EditBridgeListenerAsync(this IRedWolfAPI operations, BridgeListener body = default(BridgeListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditBridgeListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<HostedFile> GetHostedFiles(this IRedWolfAPI operations, int id)
            {
                return operations.GetHostedFilesAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostedFile>> GetHostedFilesAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostedFilesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HostedFile CreateHostedFile(this IRedWolfAPI operations, int id, HostedFile body = default(HostedFile))
            {
                return operations.CreateHostedFileAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> CreateHostedFileAsync(this IRedWolfAPI operations, int id, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHostedFileWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HostedFile EditHostedFile(this IRedWolfAPI operations, int id, HostedFile body = default(HostedFile))
            {
                return operations.EditHostedFileAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> EditHostedFileAsync(this IRedWolfAPI operations, int id, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHostedFileWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static HostedFile GetHostedFile(this IRedWolfAPI operations, int id, int hfid)
            {
                return operations.GetHostedFileAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> GetHostedFileAsync(this IRedWolfAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostedFileWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static void DeleteHostedFile(this IRedWolfAPI operations, int id, int hfid)
            {
                operations.DeleteHostedFileAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostedFileAsync(this IRedWolfAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHostedFileWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Profile> GetProfiles(this IRedWolfAPI operations)
            {
                return operations.GetProfilesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Profile>> GetProfilesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile CreateProfile(this IRedWolfAPI operations, Profile body = default(Profile))
            {
                return operations.CreateProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> CreateProfileAsync(this IRedWolfAPI operations, Profile body = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile EditProfile(this IRedWolfAPI operations, Profile body = default(Profile))
            {
                return operations.EditProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> EditProfileAsync(this IRedWolfAPI operations, Profile body = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Profile GetProfile(this IRedWolfAPI operations, int id)
            {
                return operations.GetProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> GetProfileAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteProfile(this IRedWolfAPI operations, int id)
            {
                operations.DeleteProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProfileAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<HttpProfile> GetHttpProfiles(this IRedWolfAPI operations)
            {
                return operations.GetHttpProfilesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HttpProfile>> GetHttpProfilesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpProfile CreateHttpProfile(this IRedWolfAPI operations, HttpProfile body = default(HttpProfile))
            {
                return operations.CreateHttpProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> CreateHttpProfileAsync(this IRedWolfAPI operations, HttpProfile body = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHttpProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile EditHttpProfile(this IRedWolfAPI operations, HttpProfile body = default(HttpProfile))
            {
                return operations.EditHttpProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> EditHttpProfileAsync(this IRedWolfAPI operations, HttpProfile body = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHttpProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpProfile GetHttpProfile(this IRedWolfAPI operations, int id)
            {
                return operations.GetHttpProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> GetHttpProfileAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteHttpProfile(this IRedWolfAPI operations, int id)
            {
                operations.DeleteHttpProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHttpProfileAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHttpProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceAssembly> GetReferenceAssemblies(this IRedWolfAPI operations)
            {
                return operations.GetReferenceAssembliesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceAssembly>> GetReferenceAssembliesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceAssembliesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceAssembly CreateReferenceAssembly(this IRedWolfAPI operations, ReferenceAssembly body = default(ReferenceAssembly))
            {
                return operations.CreateReferenceAssemblyAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> CreateReferenceAssemblyAsync(this IRedWolfAPI operations, ReferenceAssembly body = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferenceAssemblyWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceAssembly EditReferenceAssembly(this IRedWolfAPI operations, ReferenceAssembly body = default(ReferenceAssembly))
            {
                return operations.EditReferenceAssemblyAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> EditReferenceAssemblyAsync(this IRedWolfAPI operations, ReferenceAssembly body = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditReferenceAssemblyWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceAssembly GetReferenceAssembly(this IRedWolfAPI operations, int id)
            {
                return operations.GetReferenceAssemblyAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> GetReferenceAssemblyAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceAssemblyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteReferenceAssembly(this IRedWolfAPI operations, int id)
            {
                operations.DeleteReferenceAssemblyAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReferenceAssemblyAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReferenceAssemblyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceSourceLibrary> GetReferenceSourceLibraries(this IRedWolfAPI operations)
            {
                return operations.GetReferenceSourceLibrariesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceSourceLibrary>> GetReferenceSourceLibrariesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceSourceLibrariesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceSourceLibrary CreateReferenceSourceLibrary(this IRedWolfAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary))
            {
                return operations.CreateReferenceSourceLibraryAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> CreateReferenceSourceLibraryAsync(this IRedWolfAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferenceSourceLibraryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceSourceLibrary EditReferenceSourceLibrary(this IRedWolfAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary))
            {
                return operations.EditReferenceSourceLibraryAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> EditReferenceSourceLibraryAsync(this IRedWolfAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditReferenceSourceLibraryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceSourceLibrary GetReferenceSourceLibrary(this IRedWolfAPI operations, int id)
            {
                return operations.GetReferenceSourceLibraryAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> GetReferenceSourceLibraryAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceSourceLibraryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteReferenceSourceLibrary(this IRedWolfAPI operations, int id)
            {
                operations.DeleteReferenceSourceLibraryAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReferenceSourceLibraryAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReferenceSourceLibraryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Theme> GetThemes(this IRedWolfAPI operations)
            {
                return operations.GetThemesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Theme>> GetThemesAsync(this IRedWolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Theme CreateTheme(this IRedWolfAPI operations, Theme body = default(Theme))
            {
                return operations.CreateThemeAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> CreateThemeAsync(this IRedWolfAPI operations, Theme body = default(Theme), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateThemeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Theme EditTheme(this IRedWolfAPI operations, Theme body = default(Theme))
            {
                return operations.EditThemeAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> EditThemeAsync(this IRedWolfAPI operations, Theme body = default(Theme), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditThemeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Theme GetTheme(this IRedWolfAPI operations, int id)
            {
                return operations.GetThemeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> GetThemeAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteTheme(this IRedWolfAPI operations, int id)
            {
                operations.DeleteThemeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteThemeAsync(this IRedWolfAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteThemeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
